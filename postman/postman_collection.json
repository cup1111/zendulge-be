{
  "info": {
    "name": "Zendulge API",
    "description": "Complete API collection for Zendulge backend with Laravel-style error handling and JWT authentication.\n\n## Testing Workflow:\n1. Start with User Registration to create accounts\n2. Use Account Activation to verify accounts\n3. Use JWT Authentication for login/logout flows\n4. Test Error Testing scenarios to verify exception handling\n\n## Laravel-style Response Format:\nSuccess: { success: true, message: string, data: object }\nError: { success: false, message: string, statusCode: number, errors?: object }",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "apiPrefix",
      "value": "/api",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}{{apiPrefix}}/v1",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1"]
        },
        "description": "Health check endpoint to verify API is running"
      },
      "response": []
    },
    {
      "name": "User Registration",
      "item": [
        {
          "name": "Customer Registration - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has Laravel-style success structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data.user).to.have.property('id');",
                  "    pm.expect(jsonData.data.user).to.have.property('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"customer@example.com\",\n  \"password\": \"SecurePass123\",\n  \"name\": \"John Doe\",\n  \"jobTitle\": \"Software Developer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "register"]
            },
            "description": "Register a new customer account with Laravel-style success response"
          },
          "response": []
        },
        {
          "name": "Customer Registration - Validation Error (422)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"weak\",\n  \"name\": \"A\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "register"]
            },
            "description": "Test validation errors - should return 422 status"
          },
          "response": []
        },
        {
          "name": "Customer Registration - Email Already Exists (409)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"customer@example.com\",\n  \"password\": \"SecurePass123\",\n  \"name\": \"John Doe\",\n  \"jobTitle\": \"Software Developer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "register"]
            },
            "description": "Try to register with existing email - should return 409 status"
          },
          "response": []
        },
        {
          "name": "Business Registration - Success",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"business@example.com\",\n  \"password\": \"SecurePass123\",\n  \"name\": \"Jane Smith\",\n  \"jobTitle\": \"CEO\",\n  \"companyName\": \"Tech Solutions Inc\",\n  \"companyDescription\": \"Leading technology solutions provider\",\n  \"companyWebsite\": \"https://techsolutions.example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/business-register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "business-register"]
            },
            "description": "Register a new business account"
          },
          "response": []
        },
        {
          "name": "Business Registration - Validation Error (422)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"weak\",\n  \"name\": \"A\",\n  \"companyName\": \"X\",\n  \"companyWebsite\": \"invalid-url\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/business-register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "business-register"]
            },
            "description": "Test business registration validation errors - should return 422 status"
          },
          "response": []
        },
        {
          "name": "Business Registration - Company Already Exists (409)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"business2@example.com\",\n  \"password\": \"SecurePass123\",\n  \"name\": \"Jane Smith\",\n  \"jobTitle\": \"CEO\",\n  \"companyName\": \"Tech Solutions Inc\",\n  \"companyDescription\": \"Leading technology solutions provider\",\n  \"companyWebsite\": \"https://techsolutions.example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/business-register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "business-register"]
            },
            "description": "Try to register with existing company name - should return 409 status"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Account Activation",
      "item": [
        {
          "name": "Activate Account - Success",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/verify/validactivationtoken123",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "verify", "validactivationtoken123"]
            },
            "description": "Activate account with valid activation token"
          },
          "response": []
        },
        {
          "name": "Activate Account - Invalid Token (401)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/verify/invalidtoken123",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "verify", "invalidtoken123"]
            },
            "description": "Try to activate with invalid token - should return 401 status"
          },
          "response": []
        },
        {
          "name": "Activate Account - Expired Token (401)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/verify/expiredtoken123",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "verify", "expiredtoken123"]
            },
            "description": "Try to activate with expired token - should return 401 status"
          },
          "response": []
        },
        {
          "name": "Activate Account - Already Activated (409)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/verify/alreadyactivated123",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "verify", "alreadyactivated123"]
            },
            "description": "Try to activate already activated account - should return 409 status"
          },
          "response": []
        }
      ]
    },
    {
      "name": "JWT Authentication",
      "item": [
        {
          "name": "Login - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Response contains JWT tokens and user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('tokens');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data.tokens).to.have.property('accessToken');",
                  "    pm.expect(jsonData.data.tokens).to.have.property('refreshToken');",
                  "    pm.expect(jsonData.data.user).to.have.property('id');",
                  "    pm.expect(jsonData.data.user).to.have.property('email');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.tokens) {",
                  "        pm.environment.set('accessToken', jsonData.data.tokens.accessToken);",
                  "        pm.environment.set('refreshToken', jsonData.data.tokens.refreshToken);",
                  "        pm.environment.set('userId', jsonData.data.user.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"customer@example.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "login"]
            },
            "description": "User login with JWT token generation"
          },
          "response": []
        },
        {
          "name": "Login - Invalid Credentials (401)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has Laravel-style error structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('statusCode', 401);",
                  "    pm.expect(jsonData.message).to.include('Invalid credentials');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"customer@example.com\",\n  \"password\": \"WrongPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "login"]
            },
            "description": "Test login with invalid credentials - should return 401 with Laravel-style error response"
          },
          "response": []
        },
        {
          "name": "Login - Account Not Activated (401)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"unactivated@example.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "login"]
            },
            "description": "Test login with unactivated account - should return 401"
          },
          "response": []
        },
        {
          "name": "Login - Validation Error (422)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 422', function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test('Response has Laravel-style validation error structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('statusCode', 422);",
                  "    pm.expect(jsonData).to.have.property('errors');",
                  "    pm.expect(jsonData.errors).to.be.an('object');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "login"]
            },
            "description": "Test login validation errors - should return 422 with Laravel-style validation error response"
          },
          "response": []
        },
        {
          "name": "Get Profile - Success",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "me"]
            },
            "description": "Get current user profile (requires authentication)"
          },
          "response": []
        },
        {
          "name": "Get Profile - No Token (401)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "me"]
            },
            "description": "Test profile access without token - should return 401"
          },
          "response": []
        },
        {
          "name": "Get Profile - Invalid Token (401)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-here"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "me"]
            },
            "description": "Test profile access with invalid token - should return 401"
          },
          "response": []
        },
        {
          "name": "Refresh Token - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has Laravel-style success structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Response contains new JWT tokens', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('tokens');",
                  "    pm.expect(jsonData.data.tokens).to.have.property('accessToken');",
                  "    pm.expect(jsonData.data.tokens).to.have.property('refreshToken');",
                  "});",
                  "",
                  "// Update stored tokens",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.tokens) {",
                  "        pm.environment.set('accessToken', jsonData.data.tokens.accessToken);",
                  "        pm.environment.set('refreshToken', jsonData.data.tokens.refreshToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/refresh-token",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "refresh-token"]
            },
            "description": "Refresh access token using refresh token"
          },
          "response": []
        },
        {
          "name": "Refresh Token - Invalid Token (401)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"invalid-refresh-token\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/refresh-token",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "refresh-token"]
            },
            "description": "Test refresh with invalid token - should return 401"
          },
          "response": []
        },
        {
          "name": "Logout - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.environment.unset('accessToken');",
                  "    pm.environment.unset('refreshToken');",
                  "    pm.environment.unset('userId');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "logout"]
            },
            "description": "User logout (clears refresh token)"
          },
          "response": []
        },
        {
          "name": "Logout - No Token (401)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "logout"]
            },
            "description": "Test logout without token - should return 401"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Test ValidationException (422)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"\",\n  \"password\": \"\",\n  \"name\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "register"]
            },
            "description": "Test validation exception with empty fields"
          },
          "response": []
        },
        {
          "name": "Test EmailAlreadyExistsException (409)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"duplicate@example.com\",\n  \"password\": \"SecurePass123\",\n  \"name\": \"Test User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "register"]
            },
            "description": "First register, then run again to test EmailAlreadyExistsException"
          },
          "response": []
        },
        {
          "name": "Test InvalidActivationTokenException (401)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/verify/totallyfaketoken",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "verify", "totallyfaketoken"]
            },
            "description": "Test invalid activation token exception"
          },
          "response": []
        },
        {
          "name": "Test CompanyAlreadyExistsException (409)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"company@example.com\",\n  \"password\": \"SecurePass123\",\n  \"name\": \"Company User\",\n  \"companyName\": \"Duplicate Company Inc\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPrefix}}/v1/business-register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "business-register"]
            },
            "description": "First register, then run again to test CompanyAlreadyExistsException"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic variables if needed",
          "// pm.environment.set('timestamp', Date.now());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test scripts",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has proper JSON structure for errors', function () {",
          "    if (pm.response.code >= 400) {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('success', false);",
          "        pm.expect(jsonData).to.have.property('message');",
          "        pm.expect(jsonData).to.have.property('statusCode');",
          "    }",
          "});",
          "",
          "pm.test('Response has proper JSON structure for success', function () {",
          "    if (pm.response.code < 400) {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('success', true);",
          "    }",
          "});"
        ]
      }
    }
  ]
}
